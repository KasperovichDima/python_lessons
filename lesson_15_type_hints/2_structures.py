int  # Целое число. Пример 165 или -3
float  # Дробное число. Пример -45.054 или 7.85
str  # Строка. Пример 'Odessa'
bool  # Булево значение Пример True или False
list  # Список значений. Пример ['Klim', 'Mark', 'Artem'] или [4, 6, 8]
tuple  # Кортеж значений. Пример ('a', 'b', 'c') или (17, 23, 36)
dict  # Словарь, содержащий пары ключ-знаечние. Пример {'car': 'Mercedes', 'pen': 'Parker'}
None  # Отсутствие значения или пустое значение.


#  Список целых чисел
a: list[int] = [5, -12, 23, 0, -7]
# Кортеж из 3 строк
b: tuple[str, str, str] = ('Nika', 'Nastya', 'Olga')
# Кортеж из целых чисел любой длины
c: tuple[int, ...] = (5, 8, 12, 45, 23, 76, 45, 12)
# Словарь, в котором ключи - строки, значения - целые числа
d: dict[str, int] = {'Dima': 36, 'Oleg': 25, 'Viktor': 32}
# Список, который состоит из списков, каждый элемент которых - bool
e: list[list[bool]] = [[True, False, True], [False, False, True]]
# Словарь, в котором ключи - целые числа, значения - кортежи.
# Каждый кортеж стостоит из 3 элементов, строки, целого числа, целого числа.
f: dict[int, tuple[str, int, int]] = {45: ('Dima', 36, 4), 12: ('Nika', 13, 1)}
# Список, который состоит из целых или дробных чисел.
g: list[int | float] = [1, 2.5, 3, 5.7]
# Кортеж любой длины, который состоит из bool или None
i: tuple[bool | None, ...] = (True, None, False, None, True, True, False)


# Мы можем создавать свои собственные типы с понятными именами.
Student = tuple[str, int, int]  # Создали свой тип данных
                                # для студента с понятным названием
Group = list[Student]  # Создали свой тип данных
                       # для группы студентов с понятным названием

dima: Student = ('Dima', 36, 4)  # Созадли студента Диму
pasha: Student = ('Pavel', 25, 2)  # Созадли студента Павла
masha = (54, 'Masha', 4)  # Созадли студента Маша с неправильным типом

group: Group = []  # Создали пустой список типа Group
group.append(dima)  # Добавили в нее Диму
group.append(pasha)  # Добавили в нее Павла
# Пока все в порядке
group.append(masha)  # Попытка добавить Машу подсвечивается как ошибка,
                     # потому что тип данных Маши не соответствует Student
print(group)  # Тем не менее Маша будет добавлена в группу.
